// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steg_service.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_steg_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_steg_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_steg_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_steg_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_steg_5fservice_2eproto;
namespace steg_service {
class ResponseValue;
struct ResponseValueDefaultTypeInternal;
extern ResponseValueDefaultTypeInternal _ResponseValue_default_instance_;
class StegServiceFunction;
struct StegServiceFunctionDefaultTypeInternal;
extern StegServiceFunctionDefaultTypeInternal _StegServiceFunction_default_instance_;
class StegServiceInfo;
struct StegServiceInfoDefaultTypeInternal;
extern StegServiceInfoDefaultTypeInternal _StegServiceInfo_default_instance_;
class StegServiceParameterDefinition;
struct StegServiceParameterDefinitionDefaultTypeInternal;
extern StegServiceParameterDefinitionDefaultTypeInternal _StegServiceParameterDefinition_default_instance_;
class StegServiceRequest;
struct StegServiceRequestDefaultTypeInternal;
extern StegServiceRequestDefaultTypeInternal _StegServiceRequest_default_instance_;
class StegServiceRequestParameterValue;
struct StegServiceRequestParameterValueDefaultTypeInternal;
extern StegServiceRequestParameterValueDefaultTypeInternal _StegServiceRequestParameterValue_default_instance_;
class StegServiceRequest_ParamsEntry_DoNotUse;
struct StegServiceRequest_ParamsEntry_DoNotUseDefaultTypeInternal;
extern StegServiceRequest_ParamsEntry_DoNotUseDefaultTypeInternal _StegServiceRequest_ParamsEntry_DoNotUse_default_instance_;
class StegServiceResponse;
struct StegServiceResponseDefaultTypeInternal;
extern StegServiceResponseDefaultTypeInternal _StegServiceResponse_default_instance_;
class StegServiceResponse_ValuesEntry_DoNotUse;
struct StegServiceResponse_ValuesEntry_DoNotUseDefaultTypeInternal;
extern StegServiceResponse_ValuesEntry_DoNotUseDefaultTypeInternal _StegServiceResponse_ValuesEntry_DoNotUse_default_instance_;
class StegServiceReturnFieldDefinition;
struct StegServiceReturnFieldDefinitionDefaultTypeInternal;
extern StegServiceReturnFieldDefinitionDefaultTypeInternal _StegServiceReturnFieldDefinition_default_instance_;
}  // namespace steg_service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace steg_service {
enum Type : int {
  STRING = 0,
  INT = 1,
  FLOAT = 2,
  BOOL = 3,
  DICT = 4,
  LIST = 5,
  BYTES = 6,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(6);
constexpr int Type_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StegServiceReturnFieldDefinition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceReturnFieldDefinition) */ {
 public:
  inline StegServiceReturnFieldDefinition() : StegServiceReturnFieldDefinition(nullptr) {}
  ~StegServiceReturnFieldDefinition() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceReturnFieldDefinition(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceReturnFieldDefinition(const StegServiceReturnFieldDefinition& from) : StegServiceReturnFieldDefinition(nullptr, from) {}
  inline StegServiceReturnFieldDefinition(StegServiceReturnFieldDefinition&& from) noexcept
      : StegServiceReturnFieldDefinition(nullptr, std::move(from)) {}
  inline StegServiceReturnFieldDefinition& operator=(const StegServiceReturnFieldDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceReturnFieldDefinition& operator=(StegServiceReturnFieldDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceReturnFieldDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceReturnFieldDefinition* internal_default_instance() {
    return reinterpret_cast<const StegServiceReturnFieldDefinition*>(
        &_StegServiceReturnFieldDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(StegServiceReturnFieldDefinition& a, StegServiceReturnFieldDefinition& b) { a.Swap(&b); }
  inline void Swap(StegServiceReturnFieldDefinition* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceReturnFieldDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceReturnFieldDefinition* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceReturnFieldDefinition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceReturnFieldDefinition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceReturnFieldDefinition& from) { StegServiceReturnFieldDefinition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceReturnFieldDefinition* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceReturnFieldDefinition"; }

 protected:
  explicit StegServiceReturnFieldDefinition(::google::protobuf::Arena* arena);
  StegServiceReturnFieldDefinition(::google::protobuf::Arena* arena, const StegServiceReturnFieldDefinition& from);
  StegServiceReturnFieldDefinition(::google::protobuf::Arena* arena, StegServiceReturnFieldDefinition&& from) noexcept
      : StegServiceReturnFieldDefinition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kTypeFieldNumber = 3,
    kIsIterableFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string description = 4;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .steg_service.Type type = 3;
  void clear_type() ;
  ::steg_service::Type type() const;
  void set_type(::steg_service::Type value);

  private:
  ::steg_service::Type _internal_type() const;
  void _internal_set_type(::steg_service::Type value);

  public:
  // bool isIterable = 5;
  void clear_isiterable() ;
  bool isiterable() const;
  void set_isiterable(bool value);

  private:
  bool _internal_isiterable() const;
  void _internal_set_isiterable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceReturnFieldDefinition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceReturnFieldDefinition_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceReturnFieldDefinition& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    int type_;
    bool isiterable_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceRequestParameterValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceRequestParameterValue) */ {
 public:
  inline StegServiceRequestParameterValue() : StegServiceRequestParameterValue(nullptr) {}
  ~StegServiceRequestParameterValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceRequestParameterValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceRequestParameterValue(const StegServiceRequestParameterValue& from) : StegServiceRequestParameterValue(nullptr, from) {}
  inline StegServiceRequestParameterValue(StegServiceRequestParameterValue&& from) noexcept
      : StegServiceRequestParameterValue(nullptr, std::move(from)) {}
  inline StegServiceRequestParameterValue& operator=(const StegServiceRequestParameterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceRequestParameterValue& operator=(StegServiceRequestParameterValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceRequestParameterValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kIntValue = 2,
    kFloatValue = 3,
    kBoolValue = 4,
    kBinaryValue = 5,
    VALUE_NOT_SET = 0,
  };
  static inline const StegServiceRequestParameterValue* internal_default_instance() {
    return reinterpret_cast<const StegServiceRequestParameterValue*>(
        &_StegServiceRequestParameterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StegServiceRequestParameterValue& a, StegServiceRequestParameterValue& b) { a.Swap(&b); }
  inline void Swap(StegServiceRequestParameterValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceRequestParameterValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceRequestParameterValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceRequestParameterValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceRequestParameterValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceRequestParameterValue& from) { StegServiceRequestParameterValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceRequestParameterValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceRequestParameterValue"; }

 protected:
  explicit StegServiceRequestParameterValue(::google::protobuf::Arena* arena);
  StegServiceRequestParameterValue(::google::protobuf::Arena* arena, const StegServiceRequestParameterValue& from);
  StegServiceRequestParameterValue(::google::protobuf::Arena* arena, StegServiceRequestParameterValue&& from) noexcept
      : StegServiceRequestParameterValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kBinaryValueFieldNumber = 5,
  };
  // string string_value = 1;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // int64 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // float float_value = 3;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // bool bool_value = 4;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // bytes binary_value = 5;
  bool has_binary_value() const;
  void clear_binary_value() ;
  const std::string& binary_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_binary_value(Arg_&& arg, Args_... args);
  std::string* mutable_binary_value();
  PROTOBUF_NODISCARD std::string* release_binary_value();
  void set_allocated_binary_value(std::string* value);

  private:
  const std::string& _internal_binary_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_value(
      const std::string& value);
  std::string* _internal_mutable_binary_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceRequestParameterValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_float_value();
  void set_has_bool_value();
  void set_has_binary_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 0,
      66, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceRequestParameterValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceRequestParameterValue& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::int64_t int_value_;
      float float_value_;
      bool bool_value_;
      ::google::protobuf::internal::ArenaStringPtr binary_value_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceParameterDefinition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceParameterDefinition) */ {
 public:
  inline StegServiceParameterDefinition() : StegServiceParameterDefinition(nullptr) {}
  ~StegServiceParameterDefinition() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceParameterDefinition(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceParameterDefinition(const StegServiceParameterDefinition& from) : StegServiceParameterDefinition(nullptr, from) {}
  inline StegServiceParameterDefinition(StegServiceParameterDefinition&& from) noexcept
      : StegServiceParameterDefinition(nullptr, std::move(from)) {}
  inline StegServiceParameterDefinition& operator=(const StegServiceParameterDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceParameterDefinition& operator=(StegServiceParameterDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceParameterDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceParameterDefinition* internal_default_instance() {
    return reinterpret_cast<const StegServiceParameterDefinition*>(
        &_StegServiceParameterDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(StegServiceParameterDefinition& a, StegServiceParameterDefinition& b) { a.Swap(&b); }
  inline void Swap(StegServiceParameterDefinition* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceParameterDefinition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceParameterDefinition* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceParameterDefinition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceParameterDefinition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceParameterDefinition& from) { StegServiceParameterDefinition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceParameterDefinition* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceParameterDefinition"; }

 protected:
  explicit StegServiceParameterDefinition(::google::protobuf::Arena* arena);
  StegServiceParameterDefinition(::google::protobuf::Arena* arena, const StegServiceParameterDefinition& from);
  StegServiceParameterDefinition(::google::protobuf::Arena* arena, StegServiceParameterDefinition&& from) noexcept
      : StegServiceParameterDefinition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDefaultFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kTypeFieldNumber = 2,
    kOptionalFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string default = 3;
  void clear_default_() ;
  const std::string& default_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_(Arg_&& arg, Args_... args);
  std::string* mutable_default_();
  PROTOBUF_NODISCARD std::string* release_default_();
  void set_allocated_default_(std::string* value);

  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(
      const std::string& value);
  std::string* _internal_mutable_default_();

  public:
  // string description = 4;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .steg_service.Type type = 2;
  void clear_type() ;
  ::steg_service::Type type() const;
  void set_type(::steg_service::Type value);

  private:
  ::steg_service::Type _internal_type() const;
  void _internal_set_type(::steg_service::Type value);

  public:
  // bool optional = 5;
  void clear_optional() ;
  bool optional() const;
  void set_optional(bool value);

  private:
  bool _internal_optional() const;
  void _internal_set_optional(bool value);

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceParameterDefinition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceParameterDefinition_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceParameterDefinition& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr default__;
    ::google::protobuf::internal::ArenaStringPtr description_;
    int type_;
    bool optional_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceRequest_ParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          StegServiceRequest_ParamsEntry_DoNotUse, std::string, ::steg_service::StegServiceRequestParameterValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      StegServiceRequest_ParamsEntry_DoNotUse, std::string, ::steg_service::StegServiceRequestParameterValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  StegServiceRequest_ParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceRequest_ParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StegServiceRequest_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StegServiceRequest_ParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StegServiceRequest_ParamsEntry_DoNotUse*>(
        &_StegServiceRequest_ParamsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      55, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceFunction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceFunction) */ {
 public:
  inline StegServiceFunction() : StegServiceFunction(nullptr) {}
  ~StegServiceFunction() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceFunction(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceFunction(const StegServiceFunction& from) : StegServiceFunction(nullptr, from) {}
  inline StegServiceFunction(StegServiceFunction&& from) noexcept
      : StegServiceFunction(nullptr, std::move(from)) {}
  inline StegServiceFunction& operator=(const StegServiceFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceFunction& operator=(StegServiceFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceFunction* internal_default_instance() {
    return reinterpret_cast<const StegServiceFunction*>(
        &_StegServiceFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(StegServiceFunction& a, StegServiceFunction& b) { a.Swap(&b); }
  inline void Swap(StegServiceFunction* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceFunction* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceFunction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceFunction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceFunction& from) { StegServiceFunction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceFunction* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceFunction"; }

 protected:
  explicit StegServiceFunction(::google::protobuf::Arena* arena);
  StegServiceFunction(::google::protobuf::Arena* arena, const StegServiceFunction& from);
  StegServiceFunction(::google::protobuf::Arena* arena, StegServiceFunction&& from) noexcept
      : StegServiceFunction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParameterFieldNumber = 3,
    kReturnFieldsFieldNumber = 4,
    kSupportedFileTypesFieldNumber = 5,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kFileOptionalFieldNumber = 6,
    kIsNopFieldNumber = 7,
  };
  // repeated .steg_service.StegServiceParameterDefinition parameter = 3;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;

  public:
  void clear_parameter() ;
  ::steg_service::StegServiceParameterDefinition* mutable_parameter(int index);
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>* mutable_parameter();

  private:
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>& _internal_parameter() const;
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>* _internal_mutable_parameter();
  public:
  const ::steg_service::StegServiceParameterDefinition& parameter(int index) const;
  ::steg_service::StegServiceParameterDefinition* add_parameter();
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>& parameter() const;
  // repeated .steg_service.StegServiceReturnFieldDefinition return_fields = 4;
  int return_fields_size() const;
  private:
  int _internal_return_fields_size() const;

  public:
  void clear_return_fields() ;
  ::steg_service::StegServiceReturnFieldDefinition* mutable_return_fields(int index);
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>* mutable_return_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>& _internal_return_fields() const;
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>* _internal_mutable_return_fields();
  public:
  const ::steg_service::StegServiceReturnFieldDefinition& return_fields(int index) const;
  ::steg_service::StegServiceReturnFieldDefinition* add_return_fields();
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>& return_fields() const;
  // repeated string supported_file_types = 5;
  int supported_file_types_size() const;
  private:
  int _internal_supported_file_types_size() const;

  public:
  void clear_supported_file_types() ;
  const std::string& supported_file_types(int index) const;
  std::string* mutable_supported_file_types(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_supported_file_types(int index, Arg_&& value, Args_... args);
  std::string* add_supported_file_types();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_supported_file_types(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& supported_file_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_supported_file_types();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_supported_file_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_supported_file_types();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // bool file_optional = 6;
  void clear_file_optional() ;
  bool file_optional() const;
  void set_file_optional(bool value);

  private:
  bool _internal_file_optional() const;
  void _internal_set_file_optional(bool value);

  public:
  // bool is_nop = 7;
  void clear_is_nop() ;
  bool is_nop() const;
  void set_is_nop(bool value);

  private:
  bool _internal_is_nop() const;
  void _internal_set_is_nop(bool value);

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceFunction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      76, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceFunction_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceFunction& from_msg);
    ::google::protobuf::RepeatedPtrField< ::steg_service::StegServiceParameterDefinition > parameter_;
    ::google::protobuf::RepeatedPtrField< ::steg_service::StegServiceReturnFieldDefinition > return_fields_;
    ::google::protobuf::RepeatedPtrField<std::string> supported_file_types_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    bool file_optional_;
    bool is_nop_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResponseValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.ResponseValue) */ {
 public:
  inline ResponseValue() : ResponseValue(nullptr) {}
  ~ResponseValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseValue(const ResponseValue& from) : ResponseValue(nullptr, from) {}
  inline ResponseValue(ResponseValue&& from) noexcept
      : ResponseValue(nullptr, std::move(from)) {}
  inline ResponseValue& operator=(const ResponseValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseValue& operator=(ResponseValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 1,
    kIntValue = 2,
    kFloatValue = 3,
    kBoolValue = 4,
    kBinaryValue = 5,
    kStructuredValue = 6,
    VALUE_NOT_SET = 0,
  };
  static inline const ResponseValue* internal_default_instance() {
    return reinterpret_cast<const ResponseValue*>(
        &_ResponseValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ResponseValue& a, ResponseValue& b) { a.Swap(&b); }
  inline void Swap(ResponseValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ResponseValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseValue& from) { ResponseValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.ResponseValue"; }

 protected:
  explicit ResponseValue(::google::protobuf::Arena* arena);
  ResponseValue(::google::protobuf::Arena* arena, const ResponseValue& from);
  ResponseValue(::google::protobuf::Arena* arena, ResponseValue&& from) noexcept
      : ResponseValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringValueFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kBinaryValueFieldNumber = 5,
    kStructuredValueFieldNumber = 6,
  };
  // string string_value = 1;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // int64 int_value = 2;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // float float_value = 3;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // bool bool_value = 4;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // bytes binary_value = 5;
  bool has_binary_value() const;
  void clear_binary_value() ;
  const std::string& binary_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_binary_value(Arg_&& arg, Args_... args);
  std::string* mutable_binary_value();
  PROTOBUF_NODISCARD std::string* release_binary_value();
  void set_allocated_binary_value(std::string* value);

  private:
  const std::string& _internal_binary_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_value(
      const std::string& value);
  std::string* _internal_mutable_binary_value();

  public:
  // .google.protobuf.Value structured_value = 6;
  bool has_structured_value() const;
  private:
  bool _internal_has_structured_value() const;

  public:
  void clear_structured_value() ;
  const ::google::protobuf::Value& structured_value() const;
  PROTOBUF_NODISCARD ::google::protobuf::Value* release_structured_value();
  ::google::protobuf::Value* mutable_structured_value();
  void set_allocated_structured_value(::google::protobuf::Value* value);
  void unsafe_arena_set_allocated_structured_value(::google::protobuf::Value* value);
  ::google::protobuf::Value* unsafe_arena_release_structured_value();

  private:
  const ::google::protobuf::Value& _internal_structured_value() const;
  ::google::protobuf::Value* _internal_mutable_structured_value();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:steg_service.ResponseValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_float_value();
  void set_has_bool_value();
  void set_has_binary_value();
  void set_has_structured_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 1,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ResponseValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseValue& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::int64_t int_value_;
      float float_value_;
      bool bool_value_;
      ::google::protobuf::internal::ArenaStringPtr binary_value_;
      ::google::protobuf::Value* structured_value_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceResponse_ValuesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          StegServiceResponse_ValuesEntry_DoNotUse, std::string, ::steg_service::ResponseValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      StegServiceResponse_ValuesEntry_DoNotUse, std::string, ::steg_service::ResponseValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  StegServiceResponse_ValuesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceResponse_ValuesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StegServiceResponse_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StegServiceResponse_ValuesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StegServiceResponse_ValuesEntry_DoNotUse*>(
        &_StegServiceResponse_ValuesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      56, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceRequest) */ {
 public:
  inline StegServiceRequest() : StegServiceRequest(nullptr) {}
  ~StegServiceRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceRequest(const StegServiceRequest& from) : StegServiceRequest(nullptr, from) {}
  inline StegServiceRequest(StegServiceRequest&& from) noexcept
      : StegServiceRequest(nullptr, std::move(from)) {}
  inline StegServiceRequest& operator=(const StegServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceRequest& operator=(StegServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceRequest* internal_default_instance() {
    return reinterpret_cast<const StegServiceRequest*>(
        &_StegServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StegServiceRequest& a, StegServiceRequest& b) { a.Swap(&b); }
  inline void Swap(StegServiceRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceRequest& from) { StegServiceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceRequest"; }

 protected:
  explicit StegServiceRequest(::google::protobuf::Arena* arena);
  StegServiceRequest(::google::protobuf::Arena* arena, const StegServiceRequest& from);
  StegServiceRequest(::google::protobuf::Arena* arena, StegServiceRequest&& from) noexcept
      : StegServiceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamsFieldNumber = 3,
    kFileFieldNumber = 1,
    kFunctionFieldNumber = 2,
    kRequestTimeoutSecFieldNumber = 4,
  };
  // map<string, .steg_service.StegServiceRequestParameterValue> params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;

  public:
  void clear_params() ;
  const ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>& params() const;
  ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>* mutable_params();

  private:
  const ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>& _internal_params() const;
  ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>* _internal_mutable_params();

  public:
  // bytes file = 1;
  void clear_file() ;
  const std::string& file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file(Arg_&& arg, Args_... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* value);

  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(
      const std::string& value);
  std::string* _internal_mutable_file();

  public:
  // string function = 2;
  void clear_function() ;
  const std::string& function() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function(Arg_&& arg, Args_... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* value);

  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(
      const std::string& value);
  std::string* _internal_mutable_function();

  public:
  // int64 request_timeout_sec = 4;
  void clear_request_timeout_sec() ;
  ::int64_t request_timeout_sec() const;
  void set_request_timeout_sec(::int64_t value);

  private:
  ::int64_t _internal_request_timeout_sec() const;
  void _internal_set_request_timeout_sec(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceRequest& from_msg);
    ::google::protobuf::internal::MapField<StegServiceRequest_ParamsEntry_DoNotUse, std::string, ::steg_service::StegServiceRequestParameterValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        params_;
    ::google::protobuf::internal::ArenaStringPtr file_;
    ::google::protobuf::internal::ArenaStringPtr function_;
    ::int64_t request_timeout_sec_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceInfo) */ {
 public:
  inline StegServiceInfo() : StegServiceInfo(nullptr) {}
  ~StegServiceInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceInfo(const StegServiceInfo& from) : StegServiceInfo(nullptr, from) {}
  inline StegServiceInfo(StegServiceInfo&& from) noexcept
      : StegServiceInfo(nullptr, std::move(from)) {}
  inline StegServiceInfo& operator=(const StegServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceInfo& operator=(StegServiceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceInfo* internal_default_instance() {
    return reinterpret_cast<const StegServiceInfo*>(
        &_StegServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(StegServiceInfo& a, StegServiceInfo& b) { a.Swap(&b); }
  inline void Swap(StegServiceInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceInfo& from) { StegServiceInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceInfo"; }

 protected:
  explicit StegServiceInfo(::google::protobuf::Arena* arena);
  StegServiceInfo(::google::protobuf::Arena* arena, const StegServiceInfo& from);
  StegServiceInfo(::google::protobuf::Arena* arena, StegServiceInfo&& from) noexcept
      : StegServiceInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFunctionsFieldNumber = 3,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .steg_service.StegServiceFunction functions = 3;
  int functions_size() const;
  private:
  int _internal_functions_size() const;

  public:
  void clear_functions() ;
  ::steg_service::StegServiceFunction* mutable_functions(int index);
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>* mutable_functions();

  private:
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>& _internal_functions() const;
  ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>* _internal_mutable_functions();
  public:
  const ::steg_service::StegServiceFunction& functions(int index) const;
  ::steg_service::StegServiceFunction* add_functions();
  const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>& functions() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::steg_service::StegServiceFunction > functions_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StegServiceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_service.StegServiceResponse) */ {
 public:
  inline StegServiceResponse() : StegServiceResponse(nullptr) {}
  ~StegServiceResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegServiceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegServiceResponse(const StegServiceResponse& from) : StegServiceResponse(nullptr, from) {}
  inline StegServiceResponse(StegServiceResponse&& from) noexcept
      : StegServiceResponse(nullptr, std::move(from)) {}
  inline StegServiceResponse& operator=(const StegServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegServiceResponse& operator=(StegServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegServiceResponse* internal_default_instance() {
    return reinterpret_cast<const StegServiceResponse*>(
        &_StegServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StegServiceResponse& a, StegServiceResponse& b) { a.Swap(&b); }
  inline void Swap(StegServiceResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegServiceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegServiceResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegServiceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegServiceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegServiceResponse& from) { StegServiceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegServiceResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_service.StegServiceResponse"; }

 protected:
  explicit StegServiceResponse(::google::protobuf::Arena* arena);
  StegServiceResponse(::google::protobuf::Arena* arena, const StegServiceResponse& from);
  StegServiceResponse(::google::protobuf::Arena* arena, StegServiceResponse&& from) noexcept
      : StegServiceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // map<string, .steg_service.ResponseValue> values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>& values() const;
  ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>* mutable_values();

  private:
  const ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>& _internal_values() const;
  ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>* _internal_mutable_values();

  public:
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:steg_service.StegServiceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegServiceResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegServiceResponse& from_msg);
    ::google::protobuf::internal::MapField<StegServiceResponse_ValuesEntry_DoNotUse, std::string, ::steg_service::ResponseValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        values_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StegServiceRequest

// bytes file = 1;
inline void StegServiceRequest::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.ClearToEmpty();
}
inline const std::string& StegServiceRequest::file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequest.file)
  return _internal_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceRequest::set_file(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequest.file)
}
inline std::string* StegServiceRequest::mutable_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceRequest.file)
  return _s;
}
inline const std::string& StegServiceRequest::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_.Get();
}
inline void StegServiceRequest::_internal_set_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.Set(value, GetArena());
}
inline std::string* StegServiceRequest::_internal_mutable_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_.Mutable( GetArena());
}
inline std::string* StegServiceRequest::release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceRequest.file)
  return _impl_.file_.Release();
}
inline void StegServiceRequest::set_allocated_file(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_.IsDefault()) {
          _impl_.file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceRequest.file)
}

// string function = 2;
inline void StegServiceRequest::clear_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_.ClearToEmpty();
}
inline const std::string& StegServiceRequest::function() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequest.function)
  return _internal_function();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceRequest::set_function(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequest.function)
}
inline std::string* StegServiceRequest::mutable_function() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceRequest.function)
  return _s;
}
inline const std::string& StegServiceRequest::_internal_function() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.function_.Get();
}
inline void StegServiceRequest::_internal_set_function(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_.Set(value, GetArena());
}
inline std::string* StegServiceRequest::_internal_mutable_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.function_.Mutable( GetArena());
}
inline std::string* StegServiceRequest::release_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceRequest.function)
  return _impl_.function_.Release();
}
inline void StegServiceRequest::set_allocated_function(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.function_.IsDefault()) {
          _impl_.function_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceRequest.function)
}

// map<string, .steg_service.StegServiceRequestParameterValue> params = 3;
inline int StegServiceRequest::_internal_params_size() const {
  return _internal_params().size();
}
inline int StegServiceRequest::params_size() const {
  return _internal_params_size();
}
inline void StegServiceRequest::clear_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.params_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>& StegServiceRequest::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>& StegServiceRequest::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:steg_service.StegServiceRequest.params)
  return _internal_params();
}
inline ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>* StegServiceRequest::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::steg_service::StegServiceRequestParameterValue>* StegServiceRequest::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:steg_service.StegServiceRequest.params)
  return _internal_mutable_params();
}

// int64 request_timeout_sec = 4;
inline void StegServiceRequest::clear_request_timeout_sec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timeout_sec_ = ::int64_t{0};
}
inline ::int64_t StegServiceRequest::request_timeout_sec() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequest.request_timeout_sec)
  return _internal_request_timeout_sec();
}
inline void StegServiceRequest::set_request_timeout_sec(::int64_t value) {
  _internal_set_request_timeout_sec(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequest.request_timeout_sec)
}
inline ::int64_t StegServiceRequest::_internal_request_timeout_sec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_timeout_sec_;
}
inline void StegServiceRequest::_internal_set_request_timeout_sec(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_timeout_sec_ = value;
}

// -------------------------------------------------------------------

// StegServiceRequestParameterValue

// string string_value = 1;
inline bool StegServiceRequestParameterValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void StegServiceRequestParameterValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void StegServiceRequestParameterValue::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& StegServiceRequestParameterValue::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequestParameterValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceRequestParameterValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequestParameterValue.string_value)
}
inline std::string* StegServiceRequestParameterValue::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceRequestParameterValue.string_value)
  return _s;
}
inline const std::string& StegServiceRequestParameterValue::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void StegServiceRequestParameterValue::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* StegServiceRequestParameterValue::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* StegServiceRequestParameterValue::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceRequestParameterValue.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void StegServiceRequestParameterValue::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceRequestParameterValue.string_value)
}

// int64 int_value = 2;
inline bool StegServiceRequestParameterValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void StegServiceRequestParameterValue::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void StegServiceRequestParameterValue::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t StegServiceRequestParameterValue::int_value() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequestParameterValue.int_value)
  return _internal_int_value();
}
inline void StegServiceRequestParameterValue::set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequestParameterValue.int_value)
}
inline ::int64_t StegServiceRequestParameterValue::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}

// float float_value = 3;
inline bool StegServiceRequestParameterValue::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void StegServiceRequestParameterValue::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void StegServiceRequestParameterValue::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatValue) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float StegServiceRequestParameterValue::float_value() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequestParameterValue.float_value)
  return _internal_float_value();
}
inline void StegServiceRequestParameterValue::set_float_value(float value) {
  if (value_case() != kFloatValue) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequestParameterValue.float_value)
}
inline float StegServiceRequestParameterValue::_internal_float_value() const {
  if (value_case() == kFloatValue) {
    return _impl_.value_.float_value_;
  }
  return 0;
}

// bool bool_value = 4;
inline bool StegServiceRequestParameterValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void StegServiceRequestParameterValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void StegServiceRequestParameterValue::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool StegServiceRequestParameterValue::bool_value() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequestParameterValue.bool_value)
  return _internal_bool_value();
}
inline void StegServiceRequestParameterValue::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequestParameterValue.bool_value)
}
inline bool StegServiceRequestParameterValue::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

// bytes binary_value = 5;
inline bool StegServiceRequestParameterValue::has_binary_value() const {
  return value_case() == kBinaryValue;
}
inline void StegServiceRequestParameterValue::set_has_binary_value() {
  _impl_._oneof_case_[0] = kBinaryValue;
}
inline void StegServiceRequestParameterValue::clear_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBinaryValue) {
    _impl_.value_.binary_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& StegServiceRequestParameterValue::binary_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceRequestParameterValue.binary_value)
  return _internal_binary_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceRequestParameterValue::set_binary_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceRequestParameterValue.binary_value)
}
inline std::string* StegServiceRequestParameterValue::mutable_binary_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_binary_value();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceRequestParameterValue.binary_value)
  return _s;
}
inline const std::string& StegServiceRequestParameterValue::_internal_binary_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kBinaryValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.binary_value_.Get();
}
inline void StegServiceRequestParameterValue::_internal_set_binary_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.Set(value, GetArena());
}
inline std::string* StegServiceRequestParameterValue::_internal_mutable_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  return _impl_.value_.binary_value_.Mutable( GetArena());
}
inline std::string* StegServiceRequestParameterValue::release_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceRequestParameterValue.binary_value)
  if (value_case() != kBinaryValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.binary_value_.Release();
}
inline void StegServiceRequestParameterValue::set_allocated_binary_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_binary_value();
    _impl_.value_.binary_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceRequestParameterValue.binary_value)
}

inline bool StegServiceRequestParameterValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void StegServiceRequestParameterValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline StegServiceRequestParameterValue::ValueCase StegServiceRequestParameterValue::value_case() const {
  return StegServiceRequestParameterValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseValue

// string string_value = 1;
inline bool ResponseValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void ResponseValue::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void ResponseValue::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ResponseValue::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.ResponseValue.string_value)
}
inline std::string* ResponseValue::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:steg_service.ResponseValue.string_value)
  return _s;
}
inline const std::string& ResponseValue::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void ResponseValue::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* ResponseValue::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* ResponseValue::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.ResponseValue.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void ResponseValue::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:steg_service.ResponseValue.string_value)
}

// int64 int_value = 2;
inline bool ResponseValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void ResponseValue::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void ResponseValue::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t ResponseValue::int_value() const {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.int_value)
  return _internal_int_value();
}
inline void ResponseValue::set_int_value(::int64_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.ResponseValue.int_value)
}
inline ::int64_t ResponseValue::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return ::int64_t{0};
}

// float float_value = 3;
inline bool ResponseValue::has_float_value() const {
  return value_case() == kFloatValue;
}
inline void ResponseValue::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void ResponseValue::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatValue) {
    _impl_.value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float ResponseValue::float_value() const {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.float_value)
  return _internal_float_value();
}
inline void ResponseValue::set_float_value(float value) {
  if (value_case() != kFloatValue) {
    clear_value();
    set_has_float_value();
  }
  _impl_.value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.ResponseValue.float_value)
}
inline float ResponseValue::_internal_float_value() const {
  if (value_case() == kFloatValue) {
    return _impl_.value_.float_value_;
  }
  return 0;
}

// bool bool_value = 4;
inline bool ResponseValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ResponseValue::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void ResponseValue::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ResponseValue::bool_value() const {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.bool_value)
  return _internal_bool_value();
}
inline void ResponseValue::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:steg_service.ResponseValue.bool_value)
}
inline bool ResponseValue::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

// bytes binary_value = 5;
inline bool ResponseValue::has_binary_value() const {
  return value_case() == kBinaryValue;
}
inline void ResponseValue::set_has_binary_value() {
  _impl_._oneof_case_[0] = kBinaryValue;
}
inline void ResponseValue::clear_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBinaryValue) {
    _impl_.value_.binary_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ResponseValue::binary_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.binary_value)
  return _internal_binary_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseValue::set_binary_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.ResponseValue.binary_value)
}
inline std::string* ResponseValue::mutable_binary_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_binary_value();
  // @@protoc_insertion_point(field_mutable:steg_service.ResponseValue.binary_value)
  return _s;
}
inline const std::string& ResponseValue::_internal_binary_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kBinaryValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.binary_value_.Get();
}
inline void ResponseValue::_internal_set_binary_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  _impl_.value_.binary_value_.Set(value, GetArena());
}
inline std::string* ResponseValue::_internal_mutable_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kBinaryValue) {
    clear_value();

    set_has_binary_value();
    _impl_.value_.binary_value_.InitDefault();
  }
  return _impl_.value_.binary_value_.Mutable( GetArena());
}
inline std::string* ResponseValue::release_binary_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.ResponseValue.binary_value)
  if (value_case() != kBinaryValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.binary_value_.Release();
}
inline void ResponseValue::set_allocated_binary_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_binary_value();
    _impl_.value_.binary_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:steg_service.ResponseValue.binary_value)
}

// .google.protobuf.Value structured_value = 6;
inline bool ResponseValue::has_structured_value() const {
  return value_case() == kStructuredValue;
}
inline bool ResponseValue::_internal_has_structured_value() const {
  return value_case() == kStructuredValue;
}
inline void ResponseValue::set_has_structured_value() {
  _impl_._oneof_case_[0] = kStructuredValue;
}
inline ::google::protobuf::Value* ResponseValue::release_structured_value() {
  // @@protoc_insertion_point(field_release:steg_service.ResponseValue.structured_value)
  if (value_case() == kStructuredValue) {
    clear_has_value();
    auto* temp = _impl_.value_.structured_value_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.structured_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Value& ResponseValue::_internal_structured_value() const {
  return value_case() == kStructuredValue ? *_impl_.value_.structured_value_ : reinterpret_cast<::google::protobuf::Value&>(::google::protobuf::_Value_default_instance_);
}
inline const ::google::protobuf::Value& ResponseValue::structured_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.ResponseValue.structured_value)
  return _internal_structured_value();
}
inline ::google::protobuf::Value* ResponseValue::unsafe_arena_release_structured_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:steg_service.ResponseValue.structured_value)
  if (value_case() == kStructuredValue) {
    clear_has_value();
    auto* temp = _impl_.value_.structured_value_;
    _impl_.value_.structured_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseValue::unsafe_arena_set_allocated_structured_value(::google::protobuf::Value* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_structured_value();
    _impl_.value_.structured_value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:steg_service.ResponseValue.structured_value)
}
inline ::google::protobuf::Value* ResponseValue::_internal_mutable_structured_value() {
  if (value_case() != kStructuredValue) {
    clear_value();
    set_has_structured_value();
    _impl_.value_.structured_value_ =
        ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Value>(GetArena());
  }
  return _impl_.value_.structured_value_;
}
inline ::google::protobuf::Value* ResponseValue::mutable_structured_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Value* _msg = _internal_mutable_structured_value();
  // @@protoc_insertion_point(field_mutable:steg_service.ResponseValue.structured_value)
  return _msg;
}

inline bool ResponseValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ResponseValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ResponseValue::ValueCase ResponseValue::value_case() const {
  return ResponseValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StegServiceResponse

// map<string, .steg_service.ResponseValue> values = 1;
inline int StegServiceResponse::_internal_values_size() const {
  return _internal_values().size();
}
inline int StegServiceResponse::values_size() const {
  return _internal_values_size();
}
inline void StegServiceResponse::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>& StegServiceResponse::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>& StegServiceResponse::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:steg_service.StegServiceResponse.values)
  return _internal_values();
}
inline ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>* StegServiceResponse::_internal_mutable_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.values_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::steg_service::ResponseValue>* StegServiceResponse::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:steg_service.StegServiceResponse.values)
  return _internal_mutable_values();
}

// string error = 2;
inline void StegServiceResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& StegServiceResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceResponse.error)
}
inline std::string* StegServiceResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceResponse.error)
  return _s;
}
inline const std::string& StegServiceResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void StegServiceResponse::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* StegServiceResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* StegServiceResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceResponse.error)
  return _impl_.error_.Release();
}
inline void StegServiceResponse::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceResponse.error)
}

// -------------------------------------------------------------------

// StegServiceReturnFieldDefinition

// string name = 1;
inline void StegServiceReturnFieldDefinition::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StegServiceReturnFieldDefinition::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceReturnFieldDefinition.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceReturnFieldDefinition::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceReturnFieldDefinition.name)
}
inline std::string* StegServiceReturnFieldDefinition::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceReturnFieldDefinition.name)
  return _s;
}
inline const std::string& StegServiceReturnFieldDefinition::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StegServiceReturnFieldDefinition::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceReturnFieldDefinition.name)
  return _impl_.name_.Release();
}
inline void StegServiceReturnFieldDefinition::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceReturnFieldDefinition.name)
}

// string label = 2;
inline void StegServiceReturnFieldDefinition::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& StegServiceReturnFieldDefinition::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceReturnFieldDefinition.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceReturnFieldDefinition::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceReturnFieldDefinition.label)
}
inline std::string* StegServiceReturnFieldDefinition::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceReturnFieldDefinition.label)
  return _s;
}
inline const std::string& StegServiceReturnFieldDefinition::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void StegServiceReturnFieldDefinition::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceReturnFieldDefinition.label)
  return _impl_.label_.Release();
}
inline void StegServiceReturnFieldDefinition::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceReturnFieldDefinition.label)
}

// .steg_service.Type type = 3;
inline void StegServiceReturnFieldDefinition::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::steg_service::Type StegServiceReturnFieldDefinition::type() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceReturnFieldDefinition.type)
  return _internal_type();
}
inline void StegServiceReturnFieldDefinition::set_type(::steg_service::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceReturnFieldDefinition.type)
}
inline ::steg_service::Type StegServiceReturnFieldDefinition::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::steg_service::Type>(_impl_.type_);
}
inline void StegServiceReturnFieldDefinition::_internal_set_type(::steg_service::Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string description = 4;
inline void StegServiceReturnFieldDefinition::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& StegServiceReturnFieldDefinition::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceReturnFieldDefinition.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceReturnFieldDefinition::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceReturnFieldDefinition.description)
}
inline std::string* StegServiceReturnFieldDefinition::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceReturnFieldDefinition.description)
  return _s;
}
inline const std::string& StegServiceReturnFieldDefinition::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void StegServiceReturnFieldDefinition::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* StegServiceReturnFieldDefinition::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceReturnFieldDefinition.description)
  return _impl_.description_.Release();
}
inline void StegServiceReturnFieldDefinition::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceReturnFieldDefinition.description)
}

// bool isIterable = 5;
inline void StegServiceReturnFieldDefinition::clear_isiterable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isiterable_ = false;
}
inline bool StegServiceReturnFieldDefinition::isiterable() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceReturnFieldDefinition.isIterable)
  return _internal_isiterable();
}
inline void StegServiceReturnFieldDefinition::set_isiterable(bool value) {
  _internal_set_isiterable(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceReturnFieldDefinition.isIterable)
}
inline bool StegServiceReturnFieldDefinition::_internal_isiterable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.isiterable_;
}
inline void StegServiceReturnFieldDefinition::_internal_set_isiterable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.isiterable_ = value;
}

// -------------------------------------------------------------------

// StegServiceParameterDefinition

// string name = 1;
inline void StegServiceParameterDefinition::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StegServiceParameterDefinition::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceParameterDefinition.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceParameterDefinition::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceParameterDefinition.name)
}
inline std::string* StegServiceParameterDefinition::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceParameterDefinition.name)
  return _s;
}
inline const std::string& StegServiceParameterDefinition::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StegServiceParameterDefinition::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StegServiceParameterDefinition::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StegServiceParameterDefinition::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceParameterDefinition.name)
  return _impl_.name_.Release();
}
inline void StegServiceParameterDefinition::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceParameterDefinition.name)
}

// .steg_service.Type type = 2;
inline void StegServiceParameterDefinition::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::steg_service::Type StegServiceParameterDefinition::type() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceParameterDefinition.type)
  return _internal_type();
}
inline void StegServiceParameterDefinition::set_type(::steg_service::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceParameterDefinition.type)
}
inline ::steg_service::Type StegServiceParameterDefinition::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::steg_service::Type>(_impl_.type_);
}
inline void StegServiceParameterDefinition::_internal_set_type(::steg_service::Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string default = 3;
inline void StegServiceParameterDefinition::clear_default_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default__.ClearToEmpty();
}
inline const std::string& StegServiceParameterDefinition::default_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceParameterDefinition.default)
  return _internal_default_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceParameterDefinition::set_default_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceParameterDefinition.default)
}
inline std::string* StegServiceParameterDefinition::mutable_default_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceParameterDefinition.default)
  return _s;
}
inline const std::string& StegServiceParameterDefinition::_internal_default_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.default__.Get();
}
inline void StegServiceParameterDefinition::_internal_set_default_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default__.Set(value, GetArena());
}
inline std::string* StegServiceParameterDefinition::_internal_mutable_default_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.default__.Mutable( GetArena());
}
inline std::string* StegServiceParameterDefinition::release_default_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceParameterDefinition.default)
  return _impl_.default__.Release();
}
inline void StegServiceParameterDefinition::set_allocated_default_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.default__.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default__.IsDefault()) {
          _impl_.default__.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceParameterDefinition.default)
}

// string description = 4;
inline void StegServiceParameterDefinition::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& StegServiceParameterDefinition::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceParameterDefinition.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceParameterDefinition::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceParameterDefinition.description)
}
inline std::string* StegServiceParameterDefinition::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceParameterDefinition.description)
  return _s;
}
inline const std::string& StegServiceParameterDefinition::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void StegServiceParameterDefinition::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* StegServiceParameterDefinition::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* StegServiceParameterDefinition::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceParameterDefinition.description)
  return _impl_.description_.Release();
}
inline void StegServiceParameterDefinition::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceParameterDefinition.description)
}

// bool optional = 5;
inline void StegServiceParameterDefinition::clear_optional() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_ = false;
}
inline bool StegServiceParameterDefinition::optional() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceParameterDefinition.optional)
  return _internal_optional();
}
inline void StegServiceParameterDefinition::set_optional(bool value) {
  _internal_set_optional(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceParameterDefinition.optional)
}
inline bool StegServiceParameterDefinition::_internal_optional() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.optional_;
}
inline void StegServiceParameterDefinition::_internal_set_optional(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.optional_ = value;
}

// -------------------------------------------------------------------

// StegServiceFunction

// string name = 1;
inline void StegServiceFunction::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StegServiceFunction::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceFunction::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceFunction.name)
}
inline std::string* StegServiceFunction::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceFunction.name)
  return _s;
}
inline const std::string& StegServiceFunction::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StegServiceFunction::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StegServiceFunction::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StegServiceFunction::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceFunction.name)
  return _impl_.name_.Release();
}
inline void StegServiceFunction::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceFunction.name)
}

// string description = 2;
inline void StegServiceFunction::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& StegServiceFunction::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceFunction::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceFunction.description)
}
inline std::string* StegServiceFunction::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceFunction.description)
  return _s;
}
inline const std::string& StegServiceFunction::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void StegServiceFunction::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* StegServiceFunction::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* StegServiceFunction::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceFunction.description)
  return _impl_.description_.Release();
}
inline void StegServiceFunction::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceFunction.description)
}

// repeated .steg_service.StegServiceParameterDefinition parameter = 3;
inline int StegServiceFunction::_internal_parameter_size() const {
  return _internal_parameter().size();
}
inline int StegServiceFunction::parameter_size() const {
  return _internal_parameter_size();
}
inline void StegServiceFunction::clear_parameter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameter_.Clear();
}
inline ::steg_service::StegServiceParameterDefinition* StegServiceFunction::mutable_parameter(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceFunction.parameter)
  return _internal_mutable_parameter()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>* StegServiceFunction::mutable_parameter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:steg_service.StegServiceFunction.parameter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_parameter();
}
inline const ::steg_service::StegServiceParameterDefinition& StegServiceFunction::parameter(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.parameter)
  return _internal_parameter().Get(index);
}
inline ::steg_service::StegServiceParameterDefinition* StegServiceFunction::add_parameter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::steg_service::StegServiceParameterDefinition* _add = _internal_mutable_parameter()->Add();
  // @@protoc_insertion_point(field_add:steg_service.StegServiceFunction.parameter)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>& StegServiceFunction::parameter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:steg_service.StegServiceFunction.parameter)
  return _internal_parameter();
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>&
StegServiceFunction::_internal_parameter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameter_;
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceParameterDefinition>*
StegServiceFunction::_internal_mutable_parameter() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.parameter_;
}

// repeated .steg_service.StegServiceReturnFieldDefinition return_fields = 4;
inline int StegServiceFunction::_internal_return_fields_size() const {
  return _internal_return_fields().size();
}
inline int StegServiceFunction::return_fields_size() const {
  return _internal_return_fields_size();
}
inline void StegServiceFunction::clear_return_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.return_fields_.Clear();
}
inline ::steg_service::StegServiceReturnFieldDefinition* StegServiceFunction::mutable_return_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceFunction.return_fields)
  return _internal_mutable_return_fields()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>* StegServiceFunction::mutable_return_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:steg_service.StegServiceFunction.return_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_return_fields();
}
inline const ::steg_service::StegServiceReturnFieldDefinition& StegServiceFunction::return_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.return_fields)
  return _internal_return_fields().Get(index);
}
inline ::steg_service::StegServiceReturnFieldDefinition* StegServiceFunction::add_return_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::steg_service::StegServiceReturnFieldDefinition* _add = _internal_mutable_return_fields()->Add();
  // @@protoc_insertion_point(field_add:steg_service.StegServiceFunction.return_fields)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>& StegServiceFunction::return_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:steg_service.StegServiceFunction.return_fields)
  return _internal_return_fields();
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>&
StegServiceFunction::_internal_return_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.return_fields_;
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceReturnFieldDefinition>*
StegServiceFunction::_internal_mutable_return_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.return_fields_;
}

// repeated string supported_file_types = 5;
inline int StegServiceFunction::_internal_supported_file_types_size() const {
  return _internal_supported_file_types().size();
}
inline int StegServiceFunction::supported_file_types_size() const {
  return _internal_supported_file_types_size();
}
inline void StegServiceFunction::clear_supported_file_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.supported_file_types_.Clear();
}
inline std::string* StegServiceFunction::add_supported_file_types() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_supported_file_types()->Add();
  // @@protoc_insertion_point(field_add_mutable:steg_service.StegServiceFunction.supported_file_types)
  return _s;
}
inline const std::string& StegServiceFunction::supported_file_types(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.supported_file_types)
  return _internal_supported_file_types().Get(index);
}
inline std::string* StegServiceFunction::mutable_supported_file_types(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceFunction.supported_file_types)
  return _internal_mutable_supported_file_types()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void StegServiceFunction::set_supported_file_types(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_supported_file_types()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:steg_service.StegServiceFunction.supported_file_types)
}
template <typename Arg_, typename... Args_>
inline void StegServiceFunction::add_supported_file_types(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_supported_file_types(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:steg_service.StegServiceFunction.supported_file_types)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StegServiceFunction::supported_file_types() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:steg_service.StegServiceFunction.supported_file_types)
  return _internal_supported_file_types();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StegServiceFunction::mutable_supported_file_types() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:steg_service.StegServiceFunction.supported_file_types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_supported_file_types();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StegServiceFunction::_internal_supported_file_types() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.supported_file_types_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StegServiceFunction::_internal_mutable_supported_file_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.supported_file_types_;
}

// bool file_optional = 6;
inline void StegServiceFunction::clear_file_optional() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_optional_ = false;
}
inline bool StegServiceFunction::file_optional() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.file_optional)
  return _internal_file_optional();
}
inline void StegServiceFunction::set_file_optional(bool value) {
  _internal_set_file_optional(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceFunction.file_optional)
}
inline bool StegServiceFunction::_internal_file_optional() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_optional_;
}
inline void StegServiceFunction::_internal_set_file_optional(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_optional_ = value;
}

// bool is_nop = 7;
inline void StegServiceFunction::clear_is_nop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_nop_ = false;
}
inline bool StegServiceFunction::is_nop() const {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceFunction.is_nop)
  return _internal_is_nop();
}
inline void StegServiceFunction::set_is_nop(bool value) {
  _internal_set_is_nop(value);
  // @@protoc_insertion_point(field_set:steg_service.StegServiceFunction.is_nop)
}
inline bool StegServiceFunction::_internal_is_nop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_nop_;
}
inline void StegServiceFunction::_internal_set_is_nop(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_nop_ = value;
}

// -------------------------------------------------------------------

// StegServiceInfo

// string name = 1;
inline void StegServiceInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StegServiceInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceInfo.name)
}
inline std::string* StegServiceInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceInfo.name)
  return _s;
}
inline const std::string& StegServiceInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void StegServiceInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* StegServiceInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* StegServiceInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceInfo.name)
  return _impl_.name_.Release();
}
inline void StegServiceInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceInfo.name)
}

// string description = 2;
inline void StegServiceInfo::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& StegServiceInfo::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceInfo.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegServiceInfo::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_service.StegServiceInfo.description)
}
inline std::string* StegServiceInfo::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceInfo.description)
  return _s;
}
inline const std::string& StegServiceInfo::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void StegServiceInfo::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* StegServiceInfo::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* StegServiceInfo::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_service.StegServiceInfo.description)
  return _impl_.description_.Release();
}
inline void StegServiceInfo::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_service.StegServiceInfo.description)
}

// repeated .steg_service.StegServiceFunction functions = 3;
inline int StegServiceInfo::_internal_functions_size() const {
  return _internal_functions().size();
}
inline int StegServiceInfo::functions_size() const {
  return _internal_functions_size();
}
inline void StegServiceInfo::clear_functions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.functions_.Clear();
}
inline ::steg_service::StegServiceFunction* StegServiceInfo::mutable_functions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:steg_service.StegServiceInfo.functions)
  return _internal_mutable_functions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>* StegServiceInfo::mutable_functions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:steg_service.StegServiceInfo.functions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_functions();
}
inline const ::steg_service::StegServiceFunction& StegServiceInfo::functions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_service.StegServiceInfo.functions)
  return _internal_functions().Get(index);
}
inline ::steg_service::StegServiceFunction* StegServiceInfo::add_functions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::steg_service::StegServiceFunction* _add = _internal_mutable_functions()->Add();
  // @@protoc_insertion_point(field_add:steg_service.StegServiceInfo.functions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>& StegServiceInfo::functions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:steg_service.StegServiceInfo.functions)
  return _internal_functions();
}
inline const ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>&
StegServiceInfo::_internal_functions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.functions_;
}
inline ::google::protobuf::RepeatedPtrField<::steg_service::StegServiceFunction>*
StegServiceInfo::_internal_mutable_functions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.functions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace steg_service


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::steg_service::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::steg_service::Type>() {
  return ::steg_service::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_steg_5fservice_2eproto_2epb_2eh
