// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto
#ifndef GRPC_config_2eproto__INCLUDED
#define GRPC_config_2eproto__INCLUDED

#include "config.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace config {

class ConfigService final {
 public:
  static constexpr char const* service_full_name() {
    return "config.ConfigService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>> AsyncGetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>>(AsyncGetWorkflowFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>> PrepareAsyncGetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>>(PrepareAsyncGetWorkflowFileRaw(context, request, cq));
    }
    virtual ::grpc::Status SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::config::SetWorkflowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>> AsyncSetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>>(AsyncSetWorkflowFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>> PrepareAsyncSetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>>(PrepareAsyncSetWorkflowFileRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetServicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>> AsyncGetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>>(AsyncGetServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>> PrepareAsyncGetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>>(PrepareAsyncGetServicesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>* AsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetWorkflowResponse>* PrepareAsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>* AsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::SetWorkflowResponse>* PrepareAsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>* AsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::config::GetServicesResponse>* PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>> AsyncGetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>>(AsyncGetWorkflowFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>> PrepareAsyncGetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>>(PrepareAsyncGetWorkflowFileRaw(context, request, cq));
    }
    ::grpc::Status SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::config::SetWorkflowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>> AsyncSetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>>(AsyncSetWorkflowFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>> PrepareAsyncSetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>>(PrepareAsyncSetWorkflowFileRaw(context, request, cq));
    }
    ::grpc::Status GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetServicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>> AsyncGetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>>(AsyncGetServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>> PrepareAsyncGetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>>(PrepareAsyncGetServicesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, std::function<void(::grpc::Status)>) override;
      void SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>* AsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>* PrepareAsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>* AsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>* PrepareAsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>* AsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>* PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkflowFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SetWorkflowFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetWorkflowFile(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response);
    virtual ::grpc::Status SetWorkflowFile(::grpc::ServerContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response);
    virtual ::grpc::Status GetServices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflowFile(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::config::GetWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWorkflowFile(::grpc::ServerContext* context, ::config::SetWorkflowRequest* request, ::grpc::ServerAsyncResponseWriter< ::config::SetWorkflowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServices() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServices(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::config::GetServicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetWorkflowFile<WithAsyncMethod_SetWorkflowFile<WithAsyncMethod_GetServices<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::config::GetWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response) { return this->GetWorkflowFile(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkflowFile(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::config::GetWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::config::GetWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflowFile(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::config::SetWorkflowRequest, ::config::SetWorkflowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response) { return this->SetWorkflowFile(context, request, response); }));}
    void SetMessageAllocatorFor_SetWorkflowFile(
        ::grpc::MessageAllocator< ::config::SetWorkflowRequest, ::config::SetWorkflowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::config::SetWorkflowRequest, ::config::SetWorkflowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWorkflowFile(
      ::grpc::CallbackServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServices() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::config::GetServicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response) { return this->GetServices(context, request, response); }));}
    void SetMessageAllocatorFor_GetServices(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::config::GetServicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::config::GetServicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServices(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetWorkflowFile<WithCallbackMethod_SetWorkflowFile<WithCallbackMethod_GetServices<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServices() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkflowFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWorkflowFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServices() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkflowFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkflowFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetWorkflowFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWorkflowFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServices() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkflowFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::config::GetWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::config::GetWorkflowResponse>* streamer) {
                       return this->StreamedGetWorkflowFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkflowFile(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkflowFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::config::GetWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWorkflowFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetWorkflowFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::config::SetWorkflowRequest, ::config::SetWorkflowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::config::SetWorkflowRequest, ::config::SetWorkflowResponse>* streamer) {
                       return this->StreamedSetWorkflowFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetWorkflowFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWorkflowFile(::grpc::ServerContext* /*context*/, const ::config::SetWorkflowRequest* /*request*/, ::config::SetWorkflowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWorkflowFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::config::SetWorkflowRequest,::config::SetWorkflowResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServices() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::config::GetServicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::config::GetServicesResponse>* streamer) {
                       return this->StreamedGetServices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::config::GetServicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::config::GetServicesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetWorkflowFile<WithStreamedUnaryMethod_SetWorkflowFile<WithStreamedUnaryMethod_GetServices<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetWorkflowFile<WithStreamedUnaryMethod_SetWorkflowFile<WithStreamedUnaryMethod_GetServices<Service > > > StreamedService;
};

}  // namespace config


#endif  // GRPC_config_2eproto__INCLUDED
