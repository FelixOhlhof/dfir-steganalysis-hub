// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: config.proto

#include "config.pb.h"
#include "config.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace config {

static const char* ConfigService_method_names[] = {
  "/config.ConfigService/GetWorkflowFile",
  "/config.ConfigService/SetWorkflowFile",
  "/config.ConfigService/GetServices",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel, options));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetWorkflowFile_(ConfigService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWorkflowFile_(ConfigService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServices_(ConfigService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::config::GetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWorkflowFile_, context, request, response);
}

void ConfigService::Stub::async::GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::config::GetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowFile_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetWorkflowFile(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkflowFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>* ConfigService::Stub::PrepareAsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetWorkflowResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWorkflowFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetWorkflowResponse>* ConfigService::Stub::AsyncGetWorkflowFileRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkflowFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::config::SetWorkflowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::config::SetWorkflowRequest, ::config::SetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetWorkflowFile_, context, request, response);
}

void ConfigService::Stub::async::SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::config::SetWorkflowRequest, ::config::SetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWorkflowFile_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::SetWorkflowFile(::grpc::ClientContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWorkflowFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>* ConfigService::Stub::PrepareAsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::SetWorkflowResponse, ::config::SetWorkflowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetWorkflowFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::SetWorkflowResponse>* ConfigService::Stub::AsyncSetWorkflowFileRaw(::grpc::ClientContext* context, const ::config::SetWorkflowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetWorkflowFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::config::GetServicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::config::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServices_, context, request, response);
}

void ConfigService::Stub::async::GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::config::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServices_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::GetServices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>* ConfigService::Stub::PrepareAsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::config::GetServicesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::config::GetServicesResponse>* ConfigService::Stub::AsyncGetServicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::google::protobuf::Empty, ::config::GetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::config::GetWorkflowResponse* resp) {
               return service->GetWorkflowFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::config::SetWorkflowRequest, ::config::SetWorkflowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::config::SetWorkflowRequest* req,
             ::config::SetWorkflowResponse* resp) {
               return service->SetWorkflowFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::google::protobuf::Empty, ::config::GetServicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::config::GetServicesResponse* resp) {
               return service->GetServices(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::GetWorkflowFile(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::config::GetWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::SetWorkflowFile(::grpc::ServerContext* context, const ::config::SetWorkflowRequest* request, ::config::SetWorkflowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::GetServices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::config::GetServicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace config

