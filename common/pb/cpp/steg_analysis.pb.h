// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steg_analysis.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_steg_5fanalysis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_steg_5fanalysis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "steg_service.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_steg_5fanalysis_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_steg_5fanalysis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_steg_5fanalysis_2eproto;
namespace steg_analysis {
class StegAnalysisRequest;
struct StegAnalysisRequestDefaultTypeInternal;
extern StegAnalysisRequestDefaultTypeInternal _StegAnalysisRequest_default_instance_;
class StegAnalysisRequest_ParamsEntry_DoNotUse;
struct StegAnalysisRequest_ParamsEntry_DoNotUseDefaultTypeInternal;
extern StegAnalysisRequest_ParamsEntry_DoNotUseDefaultTypeInternal _StegAnalysisRequest_ParamsEntry_DoNotUse_default_instance_;
class StegAnalysisResponse;
struct StegAnalysisResponseDefaultTypeInternal;
extern StegAnalysisResponseDefaultTypeInternal _StegAnalysisResponse_default_instance_;
class TaskResult;
struct TaskResultDefaultTypeInternal;
extern TaskResultDefaultTypeInternal _TaskResult_default_instance_;
}  // namespace steg_analysis
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace steg_analysis {
enum Status : int {
  SUCCESS = 0,
  OUT_OF_CONDITION = 1,
  GRPC_ERROR = 2,
  EXCEEDED_TIMEOUT = 3,
  FILE_TYPE_NOT_ALLOWED = 4,
  EXCEEDED_FILESIZE = 5,
  SERVICE_ERROR = 6,
  CLIENT_ERROR = 7,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_IsValid(int value);
extern const uint32_t Status_internal_data_[];
constexpr Status Status_MIN = static_cast<Status>(0);
constexpr Status Status_MAX = static_cast<Status>(7);
constexpr int Status_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Status_descriptor();
template <typename T>
const std::string& Status_Name(T value) {
  static_assert(std::is_same<T, Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Status_Parse(absl::string_view name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
      Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StegAnalysisRequest_ParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          StegAnalysisRequest_ParamsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      StegAnalysisRequest_ParamsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  StegAnalysisRequest_ParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegAnalysisRequest_ParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StegAnalysisRequest_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StegAnalysisRequest_ParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StegAnalysisRequest_ParamsEntry_DoNotUse*>(
        &_StegAnalysisRequest_ParamsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;
  friend struct ::TableStruct_steg_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class StegAnalysisRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_analysis.StegAnalysisRequest) */ {
 public:
  inline StegAnalysisRequest() : StegAnalysisRequest(nullptr) {}
  ~StegAnalysisRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegAnalysisRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegAnalysisRequest(const StegAnalysisRequest& from) : StegAnalysisRequest(nullptr, from) {}
  inline StegAnalysisRequest(StegAnalysisRequest&& from) noexcept
      : StegAnalysisRequest(nullptr, std::move(from)) {}
  inline StegAnalysisRequest& operator=(const StegAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegAnalysisRequest& operator=(StegAnalysisRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegAnalysisRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const StegAnalysisRequest*>(
        &_StegAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StegAnalysisRequest& a, StegAnalysisRequest& b) { a.Swap(&b); }
  inline void Swap(StegAnalysisRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegAnalysisRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegAnalysisRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegAnalysisRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegAnalysisRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegAnalysisRequest& from) { StegAnalysisRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegAnalysisRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_analysis.StegAnalysisRequest"; }

 protected:
  explicit StegAnalysisRequest(::google::protobuf::Arena* arena);
  StegAnalysisRequest(::google::protobuf::Arena* arena, const StegAnalysisRequest& from);
  StegAnalysisRequest(::google::protobuf::Arena* arena, StegAnalysisRequest&& from) noexcept
      : StegAnalysisRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamsFieldNumber = 2,
    kFileFieldNumber = 1,
    kExecFieldNumber = 3,
    kFileNameFieldNumber = 4,
  };
  // map<string, string> params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;

  public:
  void clear_params() ;
  const ::google::protobuf::Map<std::string, std::string>& params() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_params();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_params() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_params();

  public:
  // bytes file = 1;
  void clear_file() ;
  const std::string& file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file(Arg_&& arg, Args_... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* value);

  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(
      const std::string& value);
  std::string* _internal_mutable_file();

  public:
  // string exec = 3;
  void clear_exec() ;
  const std::string& exec() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exec(Arg_&& arg, Args_... args);
  std::string* mutable_exec();
  PROTOBUF_NODISCARD std::string* release_exec();
  void set_allocated_exec(std::string* value);

  private:
  const std::string& _internal_exec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec(
      const std::string& value);
  std::string* _internal_mutable_exec();

  public:
  // string file_name = 4;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:steg_analysis.StegAnalysisRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      61, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegAnalysisRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegAnalysisRequest& from_msg);
    ::google::protobuf::internal::MapField<StegAnalysisRequest_ParamsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        params_;
    ::google::protobuf::internal::ArenaStringPtr file_;
    ::google::protobuf::internal::ArenaStringPtr exec_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class TaskResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_analysis.TaskResult) */ {
 public:
  inline TaskResult() : TaskResult(nullptr) {}
  ~TaskResult() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TaskResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline TaskResult(const TaskResult& from) : TaskResult(nullptr, from) {}
  inline TaskResult(TaskResult&& from) noexcept
      : TaskResult(nullptr, std::move(from)) {}
  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResult& operator=(TaskResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskResult* internal_default_instance() {
    return reinterpret_cast<const TaskResult*>(
        &_TaskResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TaskResult& a, TaskResult& b) { a.Swap(&b); }
  inline void Swap(TaskResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskResult* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TaskResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TaskResult& from) { TaskResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskResult* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_analysis.TaskResult"; }

 protected:
  explicit TaskResult(::google::protobuf::Arena* arena);
  TaskResult(::google::protobuf::Arena* arena, const TaskResult& from);
  TaskResult(::google::protobuf::Arena* arena, TaskResult&& from) noexcept
      : TaskResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskIdFieldNumber = 1,
    kServiceNameFieldNumber = 2,
    kFunctionNameFieldNumber = 3,
    kErrorFieldNumber = 5,
    kStatusFieldNumber = 6,
    kServiceResponseFieldNumber = 4,
    kDurationMsFieldNumber = 7,
  };
  // string task_id = 1;
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // string service_name = 2;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // string function_name = 3;
  void clear_function_name() ;
  const std::string& function_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function_name(Arg_&& arg, Args_... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* value);

  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(
      const std::string& value);
  std::string* _internal_mutable_function_name();

  public:
  // string error = 5;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // string status = 6;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // .steg_service.StegServiceResponse service_response = 4;
  bool has_service_response() const;
  void clear_service_response() ;
  const ::steg_service::StegServiceResponse& service_response() const;
  PROTOBUF_NODISCARD ::steg_service::StegServiceResponse* release_service_response();
  ::steg_service::StegServiceResponse* mutable_service_response();
  void set_allocated_service_response(::steg_service::StegServiceResponse* value);
  void unsafe_arena_set_allocated_service_response(::steg_service::StegServiceResponse* value);
  ::steg_service::StegServiceResponse* unsafe_arena_release_service_response();

  private:
  const ::steg_service::StegServiceResponse& _internal_service_response() const;
  ::steg_service::StegServiceResponse* _internal_mutable_service_response();

  public:
  // int64 duration_ms = 7;
  void clear_duration_ms() ;
  ::int64_t duration_ms() const;
  void set_duration_ms(::int64_t value);

  private:
  ::int64_t _internal_duration_ms() const;
  void _internal_set_duration_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:steg_analysis.TaskResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      76, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TaskResult_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TaskResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr function_name_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::steg_service::StegServiceResponse* service_response_;
    ::int64_t duration_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fanalysis_2eproto;
};
// -------------------------------------------------------------------

class StegAnalysisResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:steg_analysis.StegAnalysisResponse) */ {
 public:
  inline StegAnalysisResponse() : StegAnalysisResponse(nullptr) {}
  ~StegAnalysisResponse() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StegAnalysisResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StegAnalysisResponse(const StegAnalysisResponse& from) : StegAnalysisResponse(nullptr, from) {}
  inline StegAnalysisResponse(StegAnalysisResponse&& from) noexcept
      : StegAnalysisResponse(nullptr, std::move(from)) {}
  inline StegAnalysisResponse& operator=(const StegAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StegAnalysisResponse& operator=(StegAnalysisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StegAnalysisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StegAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const StegAnalysisResponse*>(
        &_StegAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StegAnalysisResponse& a, StegAnalysisResponse& b) { a.Swap(&b); }
  inline void Swap(StegAnalysisResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StegAnalysisResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StegAnalysisResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StegAnalysisResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StegAnalysisResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StegAnalysisResponse& from) { StegAnalysisResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StegAnalysisResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "steg_analysis.StegAnalysisResponse"; }

 protected:
  explicit StegAnalysisResponse(::google::protobuf::Arena* arena);
  StegAnalysisResponse(::google::protobuf::Arena* arena, const StegAnalysisResponse& from);
  StegAnalysisResponse(::google::protobuf::Arena* arena, StegAnalysisResponse&& from) noexcept
      : StegAnalysisResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTaskResultsFieldNumber = 1,
    kErrorFieldNumber = 2,
    kSha256FieldNumber = 4,
    kDurationMsFieldNumber = 3,
  };
  // repeated .steg_analysis.TaskResult task_results = 1;
  int task_results_size() const;
  private:
  int _internal_task_results_size() const;

  public:
  void clear_task_results() ;
  ::steg_analysis::TaskResult* mutable_task_results(int index);
  ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>* mutable_task_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>& _internal_task_results() const;
  ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>* _internal_mutable_task_results();
  public:
  const ::steg_analysis::TaskResult& task_results(int index) const;
  ::steg_analysis::TaskResult* add_task_results();
  const ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>& task_results() const;
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // string sha256 = 4;
  void clear_sha256() ;
  const std::string& sha256() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sha256(Arg_&& arg, Args_... args);
  std::string* mutable_sha256();
  PROTOBUF_NODISCARD std::string* release_sha256();
  void set_allocated_sha256(std::string* value);

  private:
  const std::string& _internal_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha256(
      const std::string& value);
  std::string* _internal_mutable_sha256();

  public:
  // int64 duration_ms = 3;
  void clear_duration_ms() ;
  ::int64_t duration_ms() const;
  void set_duration_ms(::int64_t value);

  private:
  ::int64_t _internal_duration_ms() const;
  void _internal_set_duration_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:steg_analysis.StegAnalysisResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StegAnalysisResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StegAnalysisResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::steg_analysis::TaskResult > task_results_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr sha256_;
    ::int64_t duration_ms_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steg_5fanalysis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StegAnalysisRequest

// bytes file = 1;
inline void StegAnalysisRequest::clear_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.ClearToEmpty();
}
inline const std::string& StegAnalysisRequest::file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisRequest.file)
  return _internal_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegAnalysisRequest::set_file(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisRequest.file)
}
inline std::string* StegAnalysisRequest::mutable_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisRequest.file)
  return _s;
}
inline const std::string& StegAnalysisRequest::_internal_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_.Get();
}
inline void StegAnalysisRequest::_internal_set_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.Set(value, GetArena());
}
inline std::string* StegAnalysisRequest::_internal_mutable_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_.Mutable( GetArena());
}
inline std::string* StegAnalysisRequest::release_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.StegAnalysisRequest.file)
  return _impl_.file_.Release();
}
inline void StegAnalysisRequest::set_allocated_file(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_.IsDefault()) {
          _impl_.file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.StegAnalysisRequest.file)
}

// map<string, string> params = 2;
inline int StegAnalysisRequest::_internal_params_size() const {
  return _internal_params().size();
}
inline int StegAnalysisRequest::params_size() const {
  return _internal_params_size();
}
inline void StegAnalysisRequest::clear_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.params_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& StegAnalysisRequest::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& StegAnalysisRequest::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:steg_analysis.StegAnalysisRequest.params)
  return _internal_params();
}
inline ::google::protobuf::Map<std::string, std::string>* StegAnalysisRequest::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* StegAnalysisRequest::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:steg_analysis.StegAnalysisRequest.params)
  return _internal_mutable_params();
}

// string exec = 3;
inline void StegAnalysisRequest::clear_exec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_.ClearToEmpty();
}
inline const std::string& StegAnalysisRequest::exec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisRequest.exec)
  return _internal_exec();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegAnalysisRequest::set_exec(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisRequest.exec)
}
inline std::string* StegAnalysisRequest::mutable_exec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exec();
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisRequest.exec)
  return _s;
}
inline const std::string& StegAnalysisRequest::_internal_exec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exec_.Get();
}
inline void StegAnalysisRequest::_internal_set_exec(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_.Set(value, GetArena());
}
inline std::string* StegAnalysisRequest::_internal_mutable_exec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.exec_.Mutable( GetArena());
}
inline std::string* StegAnalysisRequest::release_exec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.StegAnalysisRequest.exec)
  return _impl_.exec_.Release();
}
inline void StegAnalysisRequest::set_allocated_exec(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exec_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exec_.IsDefault()) {
          _impl_.exec_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.StegAnalysisRequest.exec)
}

// string file_name = 4;
inline void StegAnalysisRequest::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& StegAnalysisRequest::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisRequest.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegAnalysisRequest::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisRequest.file_name)
}
inline std::string* StegAnalysisRequest::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisRequest.file_name)
  return _s;
}
inline const std::string& StegAnalysisRequest::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void StegAnalysisRequest::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* StegAnalysisRequest::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* StegAnalysisRequest::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.StegAnalysisRequest.file_name)
  return _impl_.file_name_.Release();
}
inline void StegAnalysisRequest::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.StegAnalysisRequest.file_name)
}

// -------------------------------------------------------------------

// StegAnalysisResponse

// repeated .steg_analysis.TaskResult task_results = 1;
inline int StegAnalysisResponse::_internal_task_results_size() const {
  return _internal_task_results().size();
}
inline int StegAnalysisResponse::task_results_size() const {
  return _internal_task_results_size();
}
inline void StegAnalysisResponse::clear_task_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_results_.Clear();
}
inline ::steg_analysis::TaskResult* StegAnalysisResponse::mutable_task_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisResponse.task_results)
  return _internal_mutable_task_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>* StegAnalysisResponse::mutable_task_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:steg_analysis.StegAnalysisResponse.task_results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_task_results();
}
inline const ::steg_analysis::TaskResult& StegAnalysisResponse::task_results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisResponse.task_results)
  return _internal_task_results().Get(index);
}
inline ::steg_analysis::TaskResult* StegAnalysisResponse::add_task_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::steg_analysis::TaskResult* _add = _internal_mutable_task_results()->Add();
  // @@protoc_insertion_point(field_add:steg_analysis.StegAnalysisResponse.task_results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>& StegAnalysisResponse::task_results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:steg_analysis.StegAnalysisResponse.task_results)
  return _internal_task_results();
}
inline const ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>&
StegAnalysisResponse::_internal_task_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_results_;
}
inline ::google::protobuf::RepeatedPtrField<::steg_analysis::TaskResult>*
StegAnalysisResponse::_internal_mutable_task_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.task_results_;
}

// string error = 2;
inline void StegAnalysisResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& StegAnalysisResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegAnalysisResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisResponse.error)
}
inline std::string* StegAnalysisResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisResponse.error)
  return _s;
}
inline const std::string& StegAnalysisResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void StegAnalysisResponse::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* StegAnalysisResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* StegAnalysisResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.StegAnalysisResponse.error)
  return _impl_.error_.Release();
}
inline void StegAnalysisResponse::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.StegAnalysisResponse.error)
}

// int64 duration_ms = 3;
inline void StegAnalysisResponse::clear_duration_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = ::int64_t{0};
}
inline ::int64_t StegAnalysisResponse::duration_ms() const {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisResponse.duration_ms)
  return _internal_duration_ms();
}
inline void StegAnalysisResponse::set_duration_ms(::int64_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisResponse.duration_ms)
}
inline ::int64_t StegAnalysisResponse::_internal_duration_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_ms_;
}
inline void StegAnalysisResponse::_internal_set_duration_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = value;
}

// string sha256 = 4;
inline void StegAnalysisResponse::clear_sha256() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sha256_.ClearToEmpty();
}
inline const std::string& StegAnalysisResponse::sha256() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.StegAnalysisResponse.sha256)
  return _internal_sha256();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StegAnalysisResponse::set_sha256(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sha256_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.StegAnalysisResponse.sha256)
}
inline std::string* StegAnalysisResponse::mutable_sha256() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sha256();
  // @@protoc_insertion_point(field_mutable:steg_analysis.StegAnalysisResponse.sha256)
  return _s;
}
inline const std::string& StegAnalysisResponse::_internal_sha256() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sha256_.Get();
}
inline void StegAnalysisResponse::_internal_set_sha256(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sha256_.Set(value, GetArena());
}
inline std::string* StegAnalysisResponse::_internal_mutable_sha256() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sha256_.Mutable( GetArena());
}
inline std::string* StegAnalysisResponse::release_sha256() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.StegAnalysisResponse.sha256)
  return _impl_.sha256_.Release();
}
inline void StegAnalysisResponse::set_allocated_sha256(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sha256_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sha256_.IsDefault()) {
          _impl_.sha256_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.StegAnalysisResponse.sha256)
}

// -------------------------------------------------------------------

// TaskResult

// string task_id = 1;
inline void TaskResult::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& TaskResult::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.task_id)
}
inline std::string* TaskResult::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.task_id)
  return _s;
}
inline const std::string& TaskResult::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void TaskResult::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* TaskResult::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.task_id)
  return _impl_.task_id_.Release();
}
inline void TaskResult::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.task_id_.IsDefault()) {
          _impl_.task_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.task_id)
}

// string service_name = 2;
inline void TaskResult::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& TaskResult::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.service_name)
}
inline std::string* TaskResult::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.service_name)
  return _s;
}
inline const std::string& TaskResult::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void TaskResult::_internal_set_service_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* TaskResult::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.service_name)
  return _impl_.service_name_.Release();
}
inline void TaskResult::set_allocated_service_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.service_name)
}

// string function_name = 3;
inline void TaskResult::clear_function_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_name_.ClearToEmpty();
}
inline const std::string& TaskResult::function_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.function_name)
  return _internal_function_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_function_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.function_name)
}
inline std::string* TaskResult::mutable_function_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.function_name)
  return _s;
}
inline const std::string& TaskResult::_internal_function_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.function_name_.Get();
}
inline void TaskResult::_internal_set_function_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_name_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_function_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.function_name_.Mutable( GetArena());
}
inline std::string* TaskResult::release_function_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.function_name)
  return _impl_.function_name_.Release();
}
inline void TaskResult::set_allocated_function_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.function_name_.IsDefault()) {
          _impl_.function_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.function_name)
}

// .steg_service.StegServiceResponse service_response = 4;
inline bool TaskResult::has_service_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_response_ != nullptr);
  return value;
}
inline const ::steg_service::StegServiceResponse& TaskResult::_internal_service_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::steg_service::StegServiceResponse* p = _impl_.service_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::steg_service::StegServiceResponse&>(::steg_service::_StegServiceResponse_default_instance_);
}
inline const ::steg_service::StegServiceResponse& TaskResult::service_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.service_response)
  return _internal_service_response();
}
inline void TaskResult::unsafe_arena_set_allocated_service_response(::steg_service::StegServiceResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_response_);
  }
  _impl_.service_response_ = reinterpret_cast<::steg_service::StegServiceResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:steg_analysis.TaskResult.service_response)
}
inline ::steg_service::StegServiceResponse* TaskResult::release_service_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::steg_service::StegServiceResponse* released = _impl_.service_response_;
  _impl_.service_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::steg_service::StegServiceResponse* TaskResult::unsafe_arena_release_service_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.service_response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::steg_service::StegServiceResponse* temp = _impl_.service_response_;
  _impl_.service_response_ = nullptr;
  return temp;
}
inline ::steg_service::StegServiceResponse* TaskResult::_internal_mutable_service_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::steg_service::StegServiceResponse>(GetArena());
    _impl_.service_response_ = reinterpret_cast<::steg_service::StegServiceResponse*>(p);
  }
  return _impl_.service_response_;
}
inline ::steg_service::StegServiceResponse* TaskResult::mutable_service_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::steg_service::StegServiceResponse* _msg = _internal_mutable_service_response();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.service_response)
  return _msg;
}
inline void TaskResult::set_allocated_service_response(::steg_service::StegServiceResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.service_response_ = reinterpret_cast<::steg_service::StegServiceResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.service_response)
}

// string error = 5;
inline void TaskResult::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& TaskResult::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.error)
}
inline std::string* TaskResult::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.error)
  return _s;
}
inline const std::string& TaskResult::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void TaskResult::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* TaskResult::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.error)
  return _impl_.error_.Release();
}
inline void TaskResult::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.error)
}

// string status = 6;
inline void TaskResult::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& TaskResult::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskResult::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.status)
}
inline std::string* TaskResult::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:steg_analysis.TaskResult.status)
  return _s;
}
inline const std::string& TaskResult::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void TaskResult::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* TaskResult::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* TaskResult::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:steg_analysis.TaskResult.status)
  return _impl_.status_.Release();
}
inline void TaskResult::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:steg_analysis.TaskResult.status)
}

// int64 duration_ms = 7;
inline void TaskResult::clear_duration_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = ::int64_t{0};
}
inline ::int64_t TaskResult::duration_ms() const {
  // @@protoc_insertion_point(field_get:steg_analysis.TaskResult.duration_ms)
  return _internal_duration_ms();
}
inline void TaskResult::set_duration_ms(::int64_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:steg_analysis.TaskResult.duration_ms)
}
inline ::int64_t TaskResult::_internal_duration_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_ms_;
}
inline void TaskResult::_internal_set_duration_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ms_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace steg_analysis


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::steg_analysis::Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::steg_analysis::Status>() {
  return ::steg_analysis::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_steg_5fanalysis_2eproto_2epb_2eh
