// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: steg_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_STRING Type = 0
	Type_INT    Type = 1
	Type_FLOAT  Type = 2
	Type_BOOL   Type = 3
	Type_DICT   Type = 4
	Type_LIST   Type = 5
	Type_BYTES  Type = 6
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "STRING",
		1: "INT",
		2: "FLOAT",
		3: "BOOL",
		4: "DICT",
		5: "LIST",
		6: "BYTES",
	}
	Type_value = map[string]int32{
		"STRING": 0,
		"INT":    1,
		"FLOAT":  2,
		"BOOL":   3,
		"DICT":   4,
		"LIST":   5,
		"BYTES":  6,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_steg_service_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_steg_service_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{0}
}

type StegServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File              []byte                                       `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Function          string                                       `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Params            map[string]*StegServiceRequestParameterValue `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestTimeoutSec int64                                        `protobuf:"varint,4,opt,name=request_timeout_sec,json=requestTimeoutSec,proto3" json:"request_timeout_sec,omitempty"`
}

func (x *StegServiceRequest) Reset() {
	*x = StegServiceRequest{}
	mi := &file_steg_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceRequest) ProtoMessage() {}

func (x *StegServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceRequest.ProtoReflect.Descriptor instead.
func (*StegServiceRequest) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{0}
}

func (x *StegServiceRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *StegServiceRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *StegServiceRequest) GetParams() map[string]*StegServiceRequestParameterValue {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StegServiceRequest) GetRequestTimeoutSec() int64 {
	if x != nil {
		return x.RequestTimeoutSec
	}
	return 0
}

type StegServiceRequestParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*StegServiceRequestParameterValue_StringValue
	//	*StegServiceRequestParameterValue_IntValue
	//	*StegServiceRequestParameterValue_FloatValue
	//	*StegServiceRequestParameterValue_BoolValue
	//	*StegServiceRequestParameterValue_BinaryValue
	Value isStegServiceRequestParameterValue_Value `protobuf_oneof:"value"`
}

func (x *StegServiceRequestParameterValue) Reset() {
	*x = StegServiceRequestParameterValue{}
	mi := &file_steg_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceRequestParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceRequestParameterValue) ProtoMessage() {}

func (x *StegServiceRequestParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceRequestParameterValue.ProtoReflect.Descriptor instead.
func (*StegServiceRequestParameterValue) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{1}
}

func (m *StegServiceRequestParameterValue) GetValue() isStegServiceRequestParameterValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StegServiceRequestParameterValue) GetStringValue() string {
	if x, ok := x.GetValue().(*StegServiceRequestParameterValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *StegServiceRequestParameterValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*StegServiceRequestParameterValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *StegServiceRequestParameterValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*StegServiceRequestParameterValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *StegServiceRequestParameterValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*StegServiceRequestParameterValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *StegServiceRequestParameterValue) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*StegServiceRequestParameterValue_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

type isStegServiceRequestParameterValue_Value interface {
	isStegServiceRequestParameterValue_Value()
}

type StegServiceRequestParameterValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type StegServiceRequestParameterValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type StegServiceRequestParameterValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type StegServiceRequestParameterValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type StegServiceRequestParameterValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,5,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

func (*StegServiceRequestParameterValue_StringValue) isStegServiceRequestParameterValue_Value() {}

func (*StegServiceRequestParameterValue_IntValue) isStegServiceRequestParameterValue_Value() {}

func (*StegServiceRequestParameterValue_FloatValue) isStegServiceRequestParameterValue_Value() {}

func (*StegServiceRequestParameterValue_BoolValue) isStegServiceRequestParameterValue_Value() {}

func (*StegServiceRequestParameterValue_BinaryValue) isStegServiceRequestParameterValue_Value() {}

type ResponseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ResponseValue_StringValue
	//	*ResponseValue_IntValue
	//	*ResponseValue_FloatValue
	//	*ResponseValue_BoolValue
	//	*ResponseValue_BinaryValue
	//	*ResponseValue_StructuredValue
	Value isResponseValue_Value `protobuf_oneof:"value"`
}

func (x *ResponseValue) Reset() {
	*x = ResponseValue{}
	mi := &file_steg_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseValue) ProtoMessage() {}

func (x *ResponseValue) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseValue.ProtoReflect.Descriptor instead.
func (*ResponseValue) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{2}
}

func (m *ResponseValue) GetValue() isResponseValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ResponseValue) GetStringValue() string {
	if x, ok := x.GetValue().(*ResponseValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ResponseValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ResponseValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ResponseValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*ResponseValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *ResponseValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*ResponseValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ResponseValue) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*ResponseValue_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *ResponseValue) GetStructuredValue() *structpb.Value {
	if x, ok := x.GetValue().(*ResponseValue_StructuredValue); ok {
		return x.StructuredValue
	}
	return nil
}

type isResponseValue_Value interface {
	isResponseValue_Value()
}

type ResponseValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ResponseValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type ResponseValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type ResponseValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type ResponseValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,5,opt,name=binary_value,json=binaryValue,proto3,oneof"`
}

type ResponseValue_StructuredValue struct {
	StructuredValue *structpb.Value `protobuf:"bytes,6,opt,name=structured_value,json=structuredValue,proto3,oneof"` // use only for lists and dicts
}

func (*ResponseValue_StringValue) isResponseValue_Value() {}

func (*ResponseValue_IntValue) isResponseValue_Value() {}

func (*ResponseValue_FloatValue) isResponseValue_Value() {}

func (*ResponseValue_BoolValue) isResponseValue_Value() {}

func (*ResponseValue_BinaryValue) isResponseValue_Value() {}

func (*ResponseValue_StructuredValue) isResponseValue_Value() {}

type StegServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*ResponseValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error  string                    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StegServiceResponse) Reset() {
	*x = StegServiceResponse{}
	mi := &file_steg_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceResponse) ProtoMessage() {}

func (x *StegServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceResponse.ProtoReflect.Descriptor instead.
func (*StegServiceResponse) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{3}
}

func (x *StegServiceResponse) GetValues() map[string]*ResponseValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StegServiceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StegServiceReturnFieldDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label       string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Type        Type   `protobuf:"varint,3,opt,name=type,proto3,enum=steg_service.Type" json:"type,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IsIterable  bool   `protobuf:"varint,5,opt,name=isIterable,proto3" json:"isIterable,omitempty"`
}

func (x *StegServiceReturnFieldDefinition) Reset() {
	*x = StegServiceReturnFieldDefinition{}
	mi := &file_steg_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceReturnFieldDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceReturnFieldDefinition) ProtoMessage() {}

func (x *StegServiceReturnFieldDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceReturnFieldDefinition.ProtoReflect.Descriptor instead.
func (*StegServiceReturnFieldDefinition) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{4}
}

func (x *StegServiceReturnFieldDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StegServiceReturnFieldDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *StegServiceReturnFieldDefinition) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_STRING
}

func (x *StegServiceReturnFieldDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StegServiceReturnFieldDefinition) GetIsIterable() bool {
	if x != nil {
		return x.IsIterable
	}
	return false
}

type StegServiceParameterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        Type   `protobuf:"varint,2,opt,name=type,proto3,enum=steg_service.Type" json:"type,omitempty"`
	Default     string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Optional    bool   `protobuf:"varint,5,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *StegServiceParameterDefinition) Reset() {
	*x = StegServiceParameterDefinition{}
	mi := &file_steg_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceParameterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceParameterDefinition) ProtoMessage() {}

func (x *StegServiceParameterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceParameterDefinition.ProtoReflect.Descriptor instead.
func (*StegServiceParameterDefinition) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{5}
}

func (x *StegServiceParameterDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StegServiceParameterDefinition) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_STRING
}

func (x *StegServiceParameterDefinition) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *StegServiceParameterDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StegServiceParameterDefinition) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type StegServiceFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description        string                              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Parameter          []*StegServiceParameterDefinition   `protobuf:"bytes,3,rep,name=parameter,proto3" json:"parameter,omitempty"`
	ReturnFields       []*StegServiceReturnFieldDefinition `protobuf:"bytes,4,rep,name=return_fields,json=returnFields,proto3" json:"return_fields,omitempty"`
	SupportedFileTypes []string                            `protobuf:"bytes,5,rep,name=supported_file_types,json=supportedFileTypes,proto3" json:"supported_file_types,omitempty"`
	FileOptional       bool                                `protobuf:"varint,6,opt,name=file_optional,json=fileOptional,proto3" json:"file_optional,omitempty"`
	IsNop              bool                                `protobuf:"varint,7,opt,name=is_nop,json=isNop,proto3" json:"is_nop,omitempty"`
}

func (x *StegServiceFunction) Reset() {
	*x = StegServiceFunction{}
	mi := &file_steg_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceFunction) ProtoMessage() {}

func (x *StegServiceFunction) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceFunction.ProtoReflect.Descriptor instead.
func (*StegServiceFunction) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{6}
}

func (x *StegServiceFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StegServiceFunction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StegServiceFunction) GetParameter() []*StegServiceParameterDefinition {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *StegServiceFunction) GetReturnFields() []*StegServiceReturnFieldDefinition {
	if x != nil {
		return x.ReturnFields
	}
	return nil
}

func (x *StegServiceFunction) GetSupportedFileTypes() []string {
	if x != nil {
		return x.SupportedFileTypes
	}
	return nil
}

func (x *StegServiceFunction) GetFileOptional() bool {
	if x != nil {
		return x.FileOptional
	}
	return false
}

func (x *StegServiceFunction) GetIsNop() bool {
	if x != nil {
		return x.IsNop
	}
	return false
}

type StegServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Functions   []*StegServiceFunction `protobuf:"bytes,3,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *StegServiceInfo) Reset() {
	*x = StegServiceInfo{}
	mi := &file_steg_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StegServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StegServiceInfo) ProtoMessage() {}

func (x *StegServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steg_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StegServiceInfo.ProtoReflect.Descriptor instead.
func (*StegServiceInfo) Descriptor() ([]byte, []int) {
	return file_steg_service_proto_rawDescGZIP(), []int{7}
}

func (x *StegServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StegServiceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StegServiceInfo) GetFunctions() []*StegServiceFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

var File_steg_service_proto protoreflect.FileDescriptor

var file_steg_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02,
	0x0a, 0x12, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x1a, 0x69, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x65,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8a, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x01,
	0x0a, 0x13, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x53,
	0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x49, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x13, 0x53,
	0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74,
	0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74,
	0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x4e, 0x6f, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x65, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2a, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x43, 0x54, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x06, 0x32, 0xaa, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x65, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x65, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x1e, 0x0a, 0x16, 0x73, 0x74, 0x65, 0x67, 0x6f, 0x2e, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_steg_service_proto_rawDescOnce sync.Once
	file_steg_service_proto_rawDescData = file_steg_service_proto_rawDesc
)

func file_steg_service_proto_rawDescGZIP() []byte {
	file_steg_service_proto_rawDescOnce.Do(func() {
		file_steg_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_steg_service_proto_rawDescData)
	})
	return file_steg_service_proto_rawDescData
}

var file_steg_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steg_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_steg_service_proto_goTypes = []any{
	(Type)(0),                                // 0: steg_service.Type
	(*StegServiceRequest)(nil),               // 1: steg_service.StegServiceRequest
	(*StegServiceRequestParameterValue)(nil), // 2: steg_service.StegServiceRequestParameterValue
	(*ResponseValue)(nil),                    // 3: steg_service.ResponseValue
	(*StegServiceResponse)(nil),              // 4: steg_service.StegServiceResponse
	(*StegServiceReturnFieldDefinition)(nil), // 5: steg_service.StegServiceReturnFieldDefinition
	(*StegServiceParameterDefinition)(nil),   // 6: steg_service.StegServiceParameterDefinition
	(*StegServiceFunction)(nil),              // 7: steg_service.StegServiceFunction
	(*StegServiceInfo)(nil),                  // 8: steg_service.StegServiceInfo
	nil,                                      // 9: steg_service.StegServiceRequest.ParamsEntry
	nil,                                      // 10: steg_service.StegServiceResponse.ValuesEntry
	(*structpb.Value)(nil),                   // 11: google.protobuf.Value
	(*emptypb.Empty)(nil),                    // 12: google.protobuf.Empty
}
var file_steg_service_proto_depIdxs = []int32{
	9,  // 0: steg_service.StegServiceRequest.params:type_name -> steg_service.StegServiceRequest.ParamsEntry
	11, // 1: steg_service.ResponseValue.structured_value:type_name -> google.protobuf.Value
	10, // 2: steg_service.StegServiceResponse.values:type_name -> steg_service.StegServiceResponse.ValuesEntry
	0,  // 3: steg_service.StegServiceReturnFieldDefinition.type:type_name -> steg_service.Type
	0,  // 4: steg_service.StegServiceParameterDefinition.type:type_name -> steg_service.Type
	6,  // 5: steg_service.StegServiceFunction.parameter:type_name -> steg_service.StegServiceParameterDefinition
	5,  // 6: steg_service.StegServiceFunction.return_fields:type_name -> steg_service.StegServiceReturnFieldDefinition
	7,  // 7: steg_service.StegServiceInfo.functions:type_name -> steg_service.StegServiceFunction
	2,  // 8: steg_service.StegServiceRequest.ParamsEntry.value:type_name -> steg_service.StegServiceRequestParameterValue
	3,  // 9: steg_service.StegServiceResponse.ValuesEntry.value:type_name -> steg_service.ResponseValue
	1,  // 10: steg_service.StegService.Execute:input_type -> steg_service.StegServiceRequest
	12, // 11: steg_service.StegService.GetStegServiceInfo:input_type -> google.protobuf.Empty
	4,  // 12: steg_service.StegService.Execute:output_type -> steg_service.StegServiceResponse
	8,  // 13: steg_service.StegService.GetStegServiceInfo:output_type -> steg_service.StegServiceInfo
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_steg_service_proto_init() }
func file_steg_service_proto_init() {
	if File_steg_service_proto != nil {
		return
	}
	file_steg_service_proto_msgTypes[1].OneofWrappers = []any{
		(*StegServiceRequestParameterValue_StringValue)(nil),
		(*StegServiceRequestParameterValue_IntValue)(nil),
		(*StegServiceRequestParameterValue_FloatValue)(nil),
		(*StegServiceRequestParameterValue_BoolValue)(nil),
		(*StegServiceRequestParameterValue_BinaryValue)(nil),
	}
	file_steg_service_proto_msgTypes[2].OneofWrappers = []any{
		(*ResponseValue_StringValue)(nil),
		(*ResponseValue_IntValue)(nil),
		(*ResponseValue_FloatValue)(nil),
		(*ResponseValue_BoolValue)(nil),
		(*ResponseValue_BinaryValue)(nil),
		(*ResponseValue_StructuredValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steg_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steg_service_proto_goTypes,
		DependencyIndexes: file_steg_service_proto_depIdxs,
		EnumInfos:         file_steg_service_proto_enumTypes,
		MessageInfos:      file_steg_service_proto_msgTypes,
	}.Build()
	File_steg_service_proto = out.File
	file_steg_service_proto_rawDesc = nil
	file_steg_service_proto_goTypes = nil
	file_steg_service_proto_depIdxs = nil
}
