// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: steg_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StegService_Execute_FullMethodName            = "/steg_service.StegService/Execute"
	StegService_GetStegServiceInfo_FullMethodName = "/steg_service.StegService/GetStegServiceInfo"
)

// StegServiceClient is the client API for StegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StegServiceClient interface {
	Execute(ctx context.Context, in *StegServiceRequest, opts ...grpc.CallOption) (*StegServiceResponse, error)
	GetStegServiceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StegServiceInfo, error)
}

type stegServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStegServiceClient(cc grpc.ClientConnInterface) StegServiceClient {
	return &stegServiceClient{cc}
}

func (c *stegServiceClient) Execute(ctx context.Context, in *StegServiceRequest, opts ...grpc.CallOption) (*StegServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StegServiceResponse)
	err := c.cc.Invoke(ctx, StegService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stegServiceClient) GetStegServiceInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StegServiceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StegServiceInfo)
	err := c.cc.Invoke(ctx, StegService_GetStegServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StegServiceServer is the server API for StegService service.
// All implementations must embed UnimplementedStegServiceServer
// for forward compatibility.
type StegServiceServer interface {
	Execute(context.Context, *StegServiceRequest) (*StegServiceResponse, error)
	GetStegServiceInfo(context.Context, *emptypb.Empty) (*StegServiceInfo, error)
	mustEmbedUnimplementedStegServiceServer()
}

// UnimplementedStegServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStegServiceServer struct{}

func (UnimplementedStegServiceServer) Execute(context.Context, *StegServiceRequest) (*StegServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedStegServiceServer) GetStegServiceInfo(context.Context, *emptypb.Empty) (*StegServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStegServiceInfo not implemented")
}
func (UnimplementedStegServiceServer) mustEmbedUnimplementedStegServiceServer() {}
func (UnimplementedStegServiceServer) testEmbeddedByValue()                     {}

// UnsafeStegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StegServiceServer will
// result in compilation errors.
type UnsafeStegServiceServer interface {
	mustEmbedUnimplementedStegServiceServer()
}

func RegisterStegServiceServer(s grpc.ServiceRegistrar, srv StegServiceServer) {
	// If the following call pancis, it indicates UnimplementedStegServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StegService_ServiceDesc, srv)
}

func _StegService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StegServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StegServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StegService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StegServiceServer).Execute(ctx, req.(*StegServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StegService_GetStegServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StegServiceServer).GetStegServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StegService_GetStegServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StegServiceServer).GetStegServiceInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StegService_ServiceDesc is the grpc.ServiceDesc for StegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steg_service.StegService",
	HandlerType: (*StegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _StegService_Execute_Handler,
		},
		{
			MethodName: "GetStegServiceInfo",
			Handler:    _StegService_GetStegServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "steg_service.proto",
}
